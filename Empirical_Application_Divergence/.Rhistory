irf_plot(irf_obj_mon_bs,
varnames = c("Money", "Rate", "Divergece"),
leg = FALSE,
color="#156082",
mar = c(2,2,2,1),
mfrow = c(2,3),
normalize = c(rep(100, 3), 1))
irf_plot(irf_obj_mon_r,
varnames = c("Money", "Rate", "Divergece"),
leg = FALSE,
color="#156082",
mar = c(2,2,2,1),
mfrow = c(2,3),
normalize = c(rep(100, 3), 1))
irf_plot(irf_obj_asym,
varnames = c("Money", "Rate", "Divergece"),
leg = FALSE,
color="#156082",
mar = c(2,2,2,1),
mfrow = c(2,3),
normalize = c(rep(100, 3), 1))
narrative_sign_probs <- function(decomp_obj,
start_date,
freq,
dates,
signs) {
N <- dim(decomp_obj$E)[1]
m <- dim(decomp_obj$E)[3]
probs <- matrix(NA, nrow = length(dates), ncol = m)
total_probs <- rep(NA, m)
for(i in 1:m) {
for(j in 1:length(dates)) {
picked <- rbsvar:::shock_decomp_pick(decomp_obj, show_date = dates[[j]], start_date = start_date, freq = freq)
if(signs[j] == 1) agree_dummy <- picked$E[,i] > 0
if(signs[j] == -1) agree_dummy <- picked$E[,i] < 0
if(j == 1) {
agree_dummies <- agree_dummy
} else {
agree_dummies <- cbind(agree_dummies, agree_dummy)
}
}
probs[,i] <- apply(agree_dummies, 2, mean)
total_probs[i] <- mean(apply(agree_dummies, 1, function(x) ifelse(sum(x) == length(x), TRUE, FALSE)))
}
ret <- rbind(probs, total_probs)
rownames(ret) <- c(1:length(dates), "Total")
ret
}
date_list <- list(c(2000,1),
c(2009,10),
c(2021,7))
probs <- narrative_sign_probs(decomp_obj = decomp_obj,
start_date = c(1999,1),
freq = 12,
dates = date_list,
signs = c(-1,1,1) #rep(1, length(date_list))
)
for(i in 1:length(date_list)) {
rownames(probs)[i] <- paste(date_list[[i]][1], date_list[[i]][2], sep = "/")
}
colnames(probs) <- paste("Shock", 1:ncol(y))
# Fraction of the posterior satisfying the narrative sign restrictions for every shock
round(probs, 2)
probs
saveRDS(probs, "narrative_probs.rds")
# Tex table of the above
if(tex_table) {
rownames(probs)[nrow(probs)] <- " "
knitr::kable(round(probs, 2),
"latex", booktabs = T, align = "r",
caption = "Fraction of the posterior satisfying the narrative sign restrictions for every shock") %>%
kable_styling(latex_options = c("hold_position")) %>%
kableExtra::pack_rows(index = c("Contractionary shocks" = 4, "Expansionary shocks" = 4, "Total" = 1)) %>%
kable_styling(position = "center") %>%
kable_styling(font_size = 12)
}
# Compute historical shock decompositions
decomp_obj <- rbsvar:::shock_decomp(model = svar_divergence,
output = output_divergence,
burn = burn,
N = 10000)
#-------------Balance Sheet--------------------#
# October 2012 (UMP) shock decomposition (ESM)
decomp_oct_2012 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2012,10),
start_date = c(1999,1), # 12 lags
freq = 12)
# March 2015 (UMP) shock decomposition (EAPP)
decomp_mar_2015 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2015,3),
start_date = c(1999,1), # 12 lags
freq = 12)
# March 2020 (UMP) shock decomposition (PEPP)
decomp_mar_2020 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2020,3),
start_date = c(1999,1), # 12 lags
freq = 12)
#-------------Interest Sheet--------------------#
# October 2008 (rate) shock decomposition (neg/expansioanry)
decomp_oct_2008 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2008,10),
start_date = c(1999,1),
freq = 12)
# September 2022 (rate) shock decomposition (pos/contractionary)
decomp_sep_2022 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2022,9),
start_date = c(1999,1),
freq = 12)
#-------------Divergence--------------------#
# Jan 2000 (symmetric) shock decomposition (QE)
decomp_jan_2000 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2000,1),
start_date = c(1999,1), # 12 lags
freq = 12)
# October 2009 (asymmetric) shock decomposition (Euro debt crisis)
decomp_oct_2009 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2009,10),
start_date = c(1999,1), # 12 lags
freq = 12)
# July 2021 (asymmetric) shock decomposition (Inflation/end of Covid-19)
decomp_jul_2021 <- rbsvar:::shock_decomp_pick(decomp_obj = decomp_obj,
show_date = c(2021,7),
start_date = c(1999,1), # 12 lags
freq = 12)
# Asymmetric/symmetric shocks point
par(mfrow = c(1,3))
par(mar = c(2,2,2,1))
hist(decomp_jan_2000$E[,3], main = "January 2000",
col = "salmon", probability = T, breaks = 20)
abline(v = 0, lty = 2, lwd = 2)
hist(decomp_oct_2009$E[,3], main = "October 2009",
col = "darkolivegreen3", probability = T, breaks = 20)
abline(v = 0, lty = 2, lwd = 2)
hist(decomp_jul_2021$E[,3], main = "July 2021",
col = "darkolivegreen3", probability = T, breaks = 20)
abline(v = 0, lty = 2, lwd = 2)
narrative_sign_probs <- function(decomp_obj,
start_date,
freq,
dates,
signs) {
N <- dim(decomp_obj$E)[1]
m <- dim(decomp_obj$E)[3]
probs <- matrix(NA, nrow = length(dates), ncol = m)
total_probs <- rep(NA, m)
for(i in 1:m) {
for(j in 1:length(dates)) {
picked <- rbsvar:::shock_decomp_pick(decomp_obj, show_date = dates[[j]], start_date = start_date, freq = freq)
if(signs[j] == 1) agree_dummy <- picked$E[,i] > 0
if(signs[j] == -1) agree_dummy <- picked$E[,i] < 0
if(j == 1) {
agree_dummies <- agree_dummy
} else {
agree_dummies <- cbind(agree_dummies, agree_dummy)
}
}
probs[,i] <- apply(agree_dummies, 2, mean)
total_probs[i] <- mean(apply(agree_dummies, 1, function(x) ifelse(sum(x) == length(x), TRUE, FALSE)))
}
ret <- rbind(probs, total_probs)
rownames(ret) <- c(1:length(dates), "Total")
ret
}
date_list <- list(c(2000,1),
c(2009,10),
c(2021,7))
probs <- narrative_sign_probs(decomp_obj = decomp_obj,
start_date = c(1999,1),
freq = 12,
dates = date_list,
signs = c(-1,1,1) #rep(1, length(date_list))
)
for(i in 1:length(date_list)) {
rownames(probs)[i] <- paste(date_list[[i]][1], date_list[[i]][2], sep = "/")
}
colnames(probs) <- paste("Shock", 1:ncol(y))
# Fraction of the posterior satisfying the narrative sign restrictions for every shock
round(probs, 2)
probs
saveRDS(probs, "narrative_probs.rds")
# Tex table of the above
if(tex_table) {
rownames(probs)[nrow(probs)] <- " "
knitr::kable(round(probs, 2),
"latex", booktabs = T, align = "r",
caption = "Fraction of the posterior satisfying the narrative sign restrictions for every shock") %>%
kable_styling(latex_options = c("hold_position")) %>%
kableExtra::pack_rows(index = c("Contractionary shocks" = 4, "Expansionary shocks" = 4, "Total" = 1)) %>%
kable_styling(position = "center") %>%
kable_styling(font_size = 12)
}
shock_decomp2 <- function(model,
output,
burn = 0,
N = 1000,
verbose = TRUE) {
if(model$type != "svar") stop("model$type must be 'svar'")
m <- ncol(model$y)
p <- model$lags
yy <- model$xy$yy
xx <- model$xy$xx
n <- output$args$n
m0 <- output$args$m0
chains <- output$chains
b_indices <- (model$cpp_args$first_b + 1):model$cpp_args$first_sgt
a_indices <- 1:model$cpp_args$first_b
#Collect A and B sample
burn <- burn + 1
b_list <- list()
a_list <- list()
for(i in 1:n) {
#Pick one chain
row_indices <- seq(from = m0 + i - n, by = n, length.out = output$args$N + 1)
one_chain <- chains[row_indices,][-c(1:burn),]
#Pick A
a_list[[i]] <- one_chain[,a_indices]
#Pick B
b_list[[i]] <- one_chain[,b_indices]
}
for(i in 1:n) {
if(i == 1) {
full_b <- b_list[[i]]
full_a <- a_list[[i]]
} else {
full_b <- rbind(full_b, b_list[[i]])
full_a <- rbind(full_a, a_list[[i]])
}
}
#Sample N draws and compute B_inv
if(is.na(N)) {
N <- nrow(full_a)
rows <- 1:N
} else {
rows <- sample.int(nrow(full_a), N, replace = TRUE)
}
ret_E <- array(NA, dim = c(N, nrow(yy), m))
ret_U <- list()
for(i in 1:m) ret_U[[i]] <- array(NA, dim = c(N, nrow(yy), m))
full_a <- full_a[rows,]
full_b <- full_b[rows,]
full_binv <- matrix(NA, ncol = m^2, nrow = nrow(full_b))
for(j in 1:nrow(full_b)) {
B <- diag(m)
B[,] <- full_b[j,]
full_binv[j,] <- c(solve(B))
}
if(verbose == TRUE) print(paste0("Computing shock decompositions..."))
if(verbose == TRUE) pb <- txtProgressBar(min = 0, max = N, style = 3)
for(i in 1:N) {
B <- diag(m)
B_inv <- diag(m)
B[,] <- full_b[i,]
B_inv[,] <- full_binv[i,]
A <- matrix(full_a[i,], ncol = m)
U <- yy - xx %*% A
E <- U %*% t(B)
ret_E[i,,] <- E
for(j in 1:m) {
ret_U[[j]][i,,] <- matrix(c(t(E)) * B_inv[j,], byrow = TRUE, ncol = m)
}
if(verbose == TRUE) setTxtProgressBar(pb, i)
}
if(verbose == TRUE) close(pb)
ret <- list("E" = ret_E,
"U" = ret_U,
"par" = list("a" = full_a, "b" = full_b, "b_inv" = full_binv))
ret
}
date_list <- list(c(2012,10),
c(2015,3),
c(2020,3))
decomp_obj_2 <- shock_decomp2(model = svar_divergence,
output = output_divergence,
burn = burn,
#                              N = 10000
N = NA) # Set N = NA as requested by authors
shock_decomp2 <- function(model,
output,
burn = 0,
N = 1000,
verbose = TRUE) {
if(model$type != "svar") stop("model$type must be 'svar'")
m <- ncol(model$y)
p <- model$lags
yy <- model$xy$yy
xx <- model$xy$xx
n <- output$args$n
m0 <- output$args$m0
chains <- output$chains
b_indices <- (model$cpp_args$first_b + 1):model$cpp_args$first_sgt
a_indices <- 1:model$cpp_args$first_b
#Collect A and B sample
burn <- burn + 1
b_list <- list()
a_list <- list()
for(i in 1:n) {
#Pick one chain
row_indices <- seq(from = m0 + i - n, by = n, length.out = output$args$N + 1)
one_chain <- chains[row_indices,][-c(1:burn),]
#Pick A
a_list[[i]] <- one_chain[,a_indices]
#Pick B
b_list[[i]] <- one_chain[,b_indices]
}
for(i in 1:n) {
if(i == 1) {
full_b <- b_list[[i]]
full_a <- a_list[[i]]
} else {
full_b <- rbind(full_b, b_list[[i]])
full_a <- rbind(full_a, a_list[[i]])
}
}
#Sample N draws and compute B_inv
if(is.na(N)) {
N <- nrow(full_a)
rows <- 1:N
} else {
rows <- sample.int(nrow(full_a), N, replace = TRUE)
}
ret_E <- array(NA, dim = c(N, nrow(yy), m))
ret_U <- list()
for(i in 1:m) ret_U[[i]] <- array(NA, dim = c(N, nrow(yy), m))
full_a <- full_a[rows,]
full_b <- full_b[rows,]
full_binv <- matrix(NA, ncol = m^2, nrow = nrow(full_b))
for(j in 1:nrow(full_b)) {
B <- diag(m)
B[,] <- full_b[j,]
full_binv[j,] <- c(solve(B))
}
if(verbose == TRUE) print(paste0("Computing shock decompositions..."))
if(verbose == TRUE) pb <- txtProgressBar(min = 0, max = N, style = 3)
for(i in 1:N) {
B <- diag(m)
B_inv <- diag(m)
B[,] <- full_b[i,]
B_inv[,] <- full_binv[i,]
A <- matrix(full_a[i,], ncol = m)
U <- yy - xx %*% A
E <- U %*% t(B)
ret_E[i,,] <- E
for(j in 1:m) {
ret_U[[j]][i,,] <- matrix(c(t(E)) * B_inv[j,], byrow = TRUE, ncol = m)
}
if(verbose == TRUE) setTxtProgressBar(pb, i)
}
if(verbose == TRUE) close(pb)
ret <- list("E" = ret_E,
"U" = ret_U,
"par" = list("a" = full_a, "b" = full_b, "b_inv" = full_binv))
ret
}
date_list <- list(c(2012,10),
c(2015,3),
c(2020,3))
decomp_obj_2 <- shock_decomp2(model = svar_divergence,
output = output_divergence,
burn = burn,
#                              N = 10000
N = NA) # Set N = NA as requested by authors
decomp_obj_2 <- shock_decomp2(model = svar_divergence,
output = output_divergence,
burn = burn,
#                              N = 10000
N = NA) # Set N = NA as requested by authors
tex_table <- TRUE
if(tex_table) {
library(dplyr)
library(knitr)
library(kableExtra)
}
library(ggplot2)
#############################################
### Install and load 'rbsvar' from Github ###
#############################################
if(!("rbsvar" %in% installed.packages())) {
if(!("devtools" %in% installed.packages())) {
install.packages("devtools")
}
devtools::install_github("jetroant/rbsvar")
library(rbsvar)
} else {
library(rbsvar)
}
working_directory <- dirname(rstudioapi::documentPath())
setwd(working_directory)
#################
### Load Data ###
#################
if(!("rmatio" %in% installed.packages())) install.packages("rmatio")
# Read the .mat file
file_path <- "Divergence_Data_M.mat"
divergence <- rmatio::read.mat(file_path)
##########################
### Plot data ###
##########################
y <- divergence$data
colnames(y) <- unlist(divergence$varNames)
y_ts <- ts(y, start = c(1999,1), frequency = 12)
plot(y_ts)
##########################
### Estimate the model ###
##########################
# init_rbsvar() initializes the model and chooses efficient initial values for
# when sampling from the posterior distribution of the parameters in the next step.
svar_divergence <- init_rbsvar(y = y,
lags = 12,
constant = T,
type = "svar",
shrinkage = Inf
)
# est_rbsvar() estimates the model by drawing n(=2) chains from the posterior
# distribution of the parameters, starting from values provided by init_rbsvar().
# Chains are of length K*N (=10*N) and they are thinned by a factor of K(=10),
# thus the final sample consists of n*N (=2*N) non-independent draws. The chains
# are drawn with differential evolution Monte Carlo algorithm.
#
# Even though the algorithm is parallelized, this might take some time.
N <- 1000000 # 1000000
burn <- 850000 # OK until 600000
output_divergence <- readRDS("output_divergence.rds")
convergence_divergence <- convergence(output_divergence, burn=burn)
saveRDS(irf_obj_mon_bs, "/Users/moritzpfeifer/Desktop/Cycles/replication_files_all/empirical_application_divergence/irf/irf_obj_mon_bs.rds")
#saveRDS(irf_obj_mon_r, "/Users/moritzpfeifer/Desktop/Cycles/replication_files_all/empirical_application_divergence/irf/irf_obj_mon_r.rds")
#saveRDS(irf_obj_asym, "/Users/moritzpfeifer/Desktop/Cycles/replication_files_all/empirical_application_divergence/irf/irf_obj_asym.rds")
irf_obj_all <- readRDS("/Users/moritzpfeifer/Desktop/Cycles/replication_files_all/empirical_application_divergence/irf/irf_obj_all.rds")
irf_obj_mon_bs <- readRDS("/Users/moritzpfeifer/Desktop/Cycles/replication_files_all/empirical_application_divergence/irf/irf_obj_mon_bs.rds")
irf_obj_mon_r <- readRDS("/Users/moritzpfeifer/Desktop/Cycles/replication_files_all/empirical_application_divergence/irf/irf_obj_mon_r.rds")
irf_obj_asym <- readRDS("/Users/moritzpfeifer/Desktop/Cycles/replication_files_all/empirical_application_divergence/irf/irf_obj_asym.rds")
shock_decomp2 <- function(model,
output,
burn = 0,
N = 1000,
verbose = TRUE) {
if(model$type != "svar") stop("model$type must be 'svar'")
m <- ncol(model$y)
p <- model$lags
yy <- model$xy$yy
xx <- model$xy$xx
n <- output$args$n
m0 <- output$args$m0
chains <- output$chains
b_indices <- (model$cpp_args$first_b + 1):model$cpp_args$first_sgt
a_indices <- 1:model$cpp_args$first_b
#Collect A and B sample
burn <- burn + 1
b_list <- list()
a_list <- list()
for(i in 1:n) {
#Pick one chain
row_indices <- seq(from = m0 + i - n, by = n, length.out = output$args$N + 1)
one_chain <- chains[row_indices,][-c(1:burn),]
#Pick A
a_list[[i]] <- one_chain[,a_indices]
#Pick B
b_list[[i]] <- one_chain[,b_indices]
}
for(i in 1:n) {
if(i == 1) {
full_b <- b_list[[i]]
full_a <- a_list[[i]]
} else {
full_b <- rbind(full_b, b_list[[i]])
full_a <- rbind(full_a, a_list[[i]])
}
}
#Sample N draws and compute B_inv
if(is.na(N)) {
N <- nrow(full_a)
rows <- 1:N
} else {
rows <- sample.int(nrow(full_a), N, replace = TRUE)
}
ret_E <- array(NA, dim = c(N, nrow(yy), m))
ret_U <- list()
for(i in 1:m) ret_U[[i]] <- array(NA, dim = c(N, nrow(yy), m))
full_a <- full_a[rows,]
full_b <- full_b[rows,]
full_binv <- matrix(NA, ncol = m^2, nrow = nrow(full_b))
for(j in 1:nrow(full_b)) {
B <- diag(m)
B[,] <- full_b[j,]
full_binv[j,] <- c(solve(B))
}
if(verbose == TRUE) print(paste0("Computing shock decompositions..."))
if(verbose == TRUE) pb <- txtProgressBar(min = 0, max = N, style = 3)
for(i in 1:N) {
B <- diag(m)
B_inv <- diag(m)
B[,] <- full_b[i,]
B_inv[,] <- full_binv[i,]
A <- matrix(full_a[i,], ncol = m)
U <- yy - xx %*% A
E <- U %*% t(B)
ret_E[i,,] <- E
for(j in 1:m) {
ret_U[[j]][i,,] <- matrix(c(t(E)) * B_inv[j,], byrow = TRUE, ncol = m)
}
if(verbose == TRUE) setTxtProgressBar(pb, i)
}
if(verbose == TRUE) close(pb)
ret <- list("E" = ret_E,
"U" = ret_U,
"par" = list("a" = full_a, "b" = full_b, "b_inv" = full_binv))
ret
}
decomp_obj_2 <- shock_decomp2(model = svar_divergence,
output = output_divergence,
burn = burn,
#                              N = 10000
N = NA) # Set N = NA as requested by authors
